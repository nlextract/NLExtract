# Stetl-Process-chains for extracting BAG VERSION 2 source data from input zip files to PostGIS.
# A Chain is a series of Components: one Input, zero or more Filters and one Output.
# The output of a Component is connected to the input of the next Component (except for
# the final Output Component, which writes to the final destination, e.g. PostGIS or GeoPackage.
# Stetl is the ETL tool used. No custom Python code is needed!
#
# Currently the following chains are executed in the following order:
# - SQL pre:  DB initialization, create schema and tables
# - Process "Leveringsdoc" put meta info like dataset date in nlx_bag_info table
# - Process CBS gemeente provincie koppelingen
# - BAG Woonplaats-Gemeente Koppeling (onderdeel van BAG Extract Kadaster product)
# - input_bag_zip_file: inlezen BAG in PostGIS met LVBAG Driver
# - input_sql_post: post-processing o.a. aanmaken indexen en VIEWs
#
# Just van den Broecke - 2021

[etl]
chains = input_sql_pre|output_postgres_sql,
         input_bag_zipfile|output_bag_processor,
         input_string_file|command_executor,
         input_cbs_gemeenten_csv|output_postgres_gemeenten,
         input_sql_post|output_postgres_sql


#
# INPUTS
#

# Pre SQL file inputs to be executed
[input_sql_pre]
class = stetl.inputs.fileinput.StringFileInput
file_path = sql/mutations/truncate-tables.sql
format_args = schema:{schema}

# Post SQL file inputs to be executed
[input_sql_post]
class = stetl.inputs.fileinput.StringFileInput
file_path = sql/mutations/apply-mutations.sql
format_args = schema:{schema}

[input_string_file]
class = stetl.inputs.fileinput.StringFileInput
file_path = data/cbs/gemeentelijke-indeling_command.txt

[command_executor]
class = stetl.filters.execfilter.CommandExecFilter

# Input file gemeente-provincies van CBS per jaar
[input_cbs_gemeenten_csv]
class = stetl.inputs.fileinput.CsvFileInput
file_path = data/cbs/gemeentelijke-indeling.csv
delimiter = ;
empty_string_is_none = True

# BAG Extract LV zipfile.
# Contains the zip files for each BAG obj type
# Any substitutable values are specified in curly brackets e.g. {password}.
# Actual values can be passed as args to `stetl`.

[input_bag_zipfile]
class = stetl.inputs.baginput.BAGInput
file_path = {bag_mutations_input_file}
temp_dir = temp/temp_dir
multiprocessing = True


#
# OUTPUTS
#

# Algemene Postgres SQL Executor
[output_postgres_sql]
class = stetl.outputs.dboutput.PostgresDbOutput
database = {pg_db}
host = {pg_host}
port = {pg_port}
user = {pg_user}
password = {password}
schema = {schema}

# Postgres provincie_gemeente tabel wegschrijven
[output_postgres_gemeenten]
class = stetl.outputs.dboutput.PostgresInsertOutput
database = {pg_db}
host = {pg_host}
port = {pg_port}
user = {pg_user}
password = {password}
schema = {schema}
table = provincie_gemeente
truncate = False

# Process BAG 2.0 Extract mutation files
[output_bag_processor]
class = stetl.outputs.bagmutoutput.BAGMutOutput
database = {pg_db}
host = {pg_host}
port = {pg_port}
user = {pg_user}
password = {password}
schema = {schema}
truncate = False
temp_dir = temp/temp_dir
process_lig = True
process_num = True
process_opr = True
process_pnd = True
process_sta = True
process_vbo = True
process_wpl = True
process_gwr = True
process_levering = True
multiprocessing = True
